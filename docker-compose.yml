services:
  company_db:
    image: postgres:16
    container_name: company_db
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${COMPANY_DB_USER}
      POSTGRES_PASSWORD: ${COMPANY_DB_PASS}
      POSTGRES_DB: ${COMPANY_DB_NAME}
    volumes:
      - pgdata_company:/var/lib/postgresql/data
    ports:
      - "5444:5432"
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${COMPANY_DB_USER} -d ${COMPANY_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  company_service:
    build:
      context: ./services/company_management
      args:
        - DATABASE_URL=postgresql://${COMPANY_DB_USER}:${COMPANY_DB_PASS}@company_db:5432/${COMPANY_DB_NAME}
    container_name: company_service
    env_file:
      - .env
    depends_on:
      company_db:
        condition: service_started
    ports:
      - "8000:8000"
    environment:
      COMPANY_DB_HOST: company_db
      COMPANY_DB_PORT: 5432
      COMPANY_DB_USER: ${COMPANY_DB_USER}
      COMPANY_DB_PASS: ${COMPANY_DB_PASS}
      COMPANY_DB_NAME: ${COMPANY_DB_NAME}
      USER_SERVICE_URL: http://user_service:8000
    networks:
      - app_network

  company_tests:
    build:
      context: ./services/company_management
    env_file:
      - .env
    environment:
      USER_SERVICE_URL: ${USER_SERVICE_URL}

    container_name: company_tests
    command: ["pytest", "-v", "--tb=short", "-p", "no:cacheprovider"]
    networks:
      - app_network

  product_db:
    image: postgres:16
    container_name: product_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: productdb
    volumes:
      - pgdata_product:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d productdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  product_service:
    build: 
      context: ./services/product
      args:
        - DATABASE_URL=postgresql://postgres:password@product_db:5432/productdb
    container_name: product_service
    env_file:
      - .env
    depends_on:
      product_db:
        condition: service_healthy
    ports:
      - "8001:8000"
    environment:
      # at runtime, the app can read its DB URL here
      DATABASE_URL: postgresql://postgres:password@product_db:5432/productdb
    networks:
      - app_network

  product_tests:
    build:
      context: ./services/product
    container_name: product_tests
    command: ["pytest", "-v", "--tb=short", "-p", "no:cacheprovider"]
    depends_on:
      product_db:
        condition: service_healthy
    networks:
      - app_network

  user_db:
    image: postgres:16
    container_name: user_db
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${USER_DB_NAME}
    volumes:
      - pgdata_users:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${USER_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  user_service:
    build:
      context: ./services/user_management
    container_name: user_service
    env_file:
      - .env
    depends_on:
      user_db:
        condition: service_healthy
    ports:
      - "8003:8000"
    environment:
      DB_HOST: user_db
      DB_PORT: 5432
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
      DB_NAME: ${USER_DB_NAME}
      NOTIFICATION_SERVICE_URL: "http://notification_service:8000"
    networks:
      - app_network

  gateway:
    build:
      context: ./services/gateway
    container_name: gateway
    env_file:
      - .env
    ports:
      - "7000:7000"
    networks:
      - app_network

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4
    restart: always
    env_file:
      - .env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    depends_on:
      product_db:
        condition: service_healthy
    ports:
      - "8006:8000"
    networks:
      - app_network
  
  notification_service:
    build:
      context: ./services/notification
    container_name: notification_service
    env_file:
      - .env
    environment:
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_FROM=${SMTP_FROM}
    ports:
      - "8004:8000"
    networks:
      - app_network

volumes:
  pgdata_company:
  pgdata_product:
  pgdata_users:

networks:
  app_network:
    driver: bridge