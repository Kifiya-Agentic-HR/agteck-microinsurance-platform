services:
  company_db:
    image: postgres:16
    container_name: company_db
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${COMPANY_DB_USER}
      POSTGRES_PASSWORD: ${COMPANY_DB_PASS}
      POSTGRES_DB: ${COMPANY_DB_NAME}
    # volumes:
      # - pgdata_company:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${COMPANY_DB_USER} -d ${COMPANY_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  company_service:
    build:
      context: ./services/company_management
      args:
        - DATABASE_URL=postgresql://${COMPANY_DB_USER}:${COMPANY_DB_PASS}@company_db:5432/${COMPANY_DB_NAME}
    container_name: company_service
    env_file:
      - .env
    depends_on:
      company_db:
        condition: service_started
    environment:
      COMPANY_DB_HOST: company_db
      COMPANY_DB_PORT: 5432
      COMPANY_DB_USER: ${COMPANY_DB_USER}
      COMPANY_DB_PASS: ${COMPANY_DB_PASS}
      COMPANY_DB_NAME: ${COMPANY_DB_NAME}
      USER_SERVICE_URL: http://user_service:8000
    networks:
      - app_network
  company_tests:
    build:
      context: ./services/company_management
    profiles: [ "test" ] 
    env_file:
      - .env
    environment:
      USER_SERVICE_URL: http://user_service:8000

    container_name: company_tests
    command: ["pytest", "-v", "--tb=short", "-p", "no:cacheprovider"]
    networks:
      - app_network

  product_db:
    image: postgres:16
    container_name: product_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: productdb
    volumes:
      - pgdata_product:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d productdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  product_service:
    build: 
      context: ./services/product
      args:
        - DATABASE_URL=postgresql://postgres:password@product_db:5432/productdb
    container_name: product_service
    env_file:
      - .env
    ports:
      - "8005:8000" # Expose the port defined in the Dockerfile
    depends_on:
      product_db:
        condition: service_healthy
    environment:
      # at runtime, the app can read its DB URL here
      DATABASE_URL: postgresql://postgres:password@product_db:5432/productdb
      CLAIM_SERVICE_URL: http://claim_service:8000/api/claim
    networks:
      - app_network

  product_tests:
    build:
      context: ./services/product
    profiles: [ "test" ] 
    container_name: product_tests
    command: ["pytest", "-v", "--tb=short", "-p", "no:cacheprovider"]
    depends_on:
      product_db:
        condition: service_healthy
    networks:
      - app_network

  user_db:
    image: postgres:16
    container_name: user_db
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${USER_DB_NAME}
    volumes:
      - pgdata_users:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${USER_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  user_service:
    build:
      context: ./services/user_management
    container_name: user_service
    env_file:
      - .env
    depends_on:
      user_db:
        condition: service_healthy
    environment:
      DB_HOST: user_db
      DB_PORT: 5432
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
      DB_NAME: ${USER_DB_NAME}
      NOTIFICATION_SERVICE_URL: "http://notification_service:8000"
    networks:
      - app_network
  policy_db:
    image: postgres:16
    container_name: policy_db
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POLICY_DB_USER}
      POSTGRES_PASSWORD: ${POLICY_DB_PASS}
      POSTGRES_DB: ${POLICY_DB_NAME}
    volumes:
      - pgdata_policy:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POLICY_DB_USER} -d ${POLICY_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  policy_service:
    build:
      context: ./services/policy
      args:
        - DATABASE_URL=postgresql://${POLICY_DB_USER}:${POLICY_DB_PASS}@policy_db:5432/${POLICY_DB_NAME}
    container_name: policy_service
    env_file:
      - .env
    ports:
      - "8006:8000" # Expose the port defined in the Dockerfile
    depends_on:
      policy_db:
        condition: service_started
    environment:
      DB_HOST: policy_db
      DB_PORT: 5432
      DB_USER: ${POLICY_DB_USER}
      DB_PASS: ${POLICY_DB_PASS}
      DB_NAME: ${POLICY_DB_NAME}
      PRODUCT_SERVICE_URL: http://product_service:8000
      DFS_SERVICE_URL: http://dfs_service:8000
      DATABASE_URL: postgresql://${POLICY_DB_USER}:${POLICY_DB_PASS}@policy_db:5432/${POLICY_DB_NAME}
    networks:
      - app_network

  policy_tests:
    build:
      context: ./services/policy
    profiles: [ "test" ] 
    container_name: policy_tests
    environment:
      - DATABASE_URL=sqlite:///:memory
      - PRODUCT_SERVICE_URL=http://product_service:8000
      - DFS_SERVICE_URL=http://dfs_service:8000
    command: ["pytest", "-v", "--tb=short", "-p", "no:cacheprovider"]

    networks:
      - app_network
      
  report_db:
    image: postgres:16
    container_name: report_db
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${REPORT_DB_USER}
      POSTGRES_PASSWORD: ${REPORT_DB_PASS}
      POSTGRES_DB: ${REPORT_DB_NAME}
    volumes:
      - pgdata_report:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${REPORT_DB_USER} -d ${REPORT_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  report_service:
    build:
      context: ./services/report
      args:
        - DATABASE_URL=postgresql://${REPORT_DB_USER}:${REPORT_DB_PASS}@report_db:5432/${REPORT_DB_NAME}
    container_name: report_service
    env_file:
      - .env
    depends_on:
      report_db:
        condition: service_started
    environment:
      REPORT_DB_HOST: report_db
      REPORT_DB_PORT: 5432
      REPORT_DB_USER: ${REPORT_DB_USER}
      REPORT_DB_PASS: ${REPORT_DB_PASS}
      REPORT_DB_NAME: ${REPORT_DB_NAME}
      CLAIM_SERVICE_URL: http://claim_service:8000
      POLICY_SERVICE_URL: http://policy_service:8000
      COMMISSION_SERVICE_URL: http://commision_service:8000
      DATABASE_URL: postgresql://${REPORT_DB_USER}:${REPORT_DB_PASS}@report_db:5432/${REPORT_DB_NAME}
    networks:
      - app_network
  

  dfs_service:
    build:
      context: ./services/dfs
      args:
        - DATABASE_URL=postgresql://${DFS_DB_USER}:${DFS_DB_PASS}@dfs_db:5432/${DFS_DB_NAME}
    container_name: dfs_service
    env_file:
      - .env
    depends_on:
      dfs_db:
        condition: service_started
    environment:
      POLICY_SERVICE_URL: http://policy_service:8000
      DATABASE_URL: postgresql://${DFS_DB_USER}:${DFS_DB_PASS}@dfs_db:5432/${DFS_DB_NAME}
    networks:
      - app_network

  dfs_db:
    image: postgres:16
    container_name: dfs_db
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DFS_DB_USER}
      POSTGRES_PASSWORD: ${DFS_DB_PASS}
      POSTGRES_DB: ${DFS_DB_NAME}
    volumes:
      - pgdata_dfs:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DFS_DB_USER} -d ${DFS_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  config_db:
    image: postgres:16
    container_name: config_db
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${CONFIG_DB_USER}
      POSTGRES_PASSWORD: ${CONFIG_DB_PASS}
      POSTGRES_DB: ${CONFIG_DB_NAME}
    volumes:
      - pgdata_config:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${CONFIG_DB_USER} -d ${CONFIG_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  config_service:
    build:
      context: ./services/config
    container_name: config_service
    env_file:
      - .env
    depends_on:
      config_db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${CONFIG_DB_USER}:${CONFIG_DB_PASS}@config_db:5432/${CONFIG_DB_NAME}
    networks:
      - app_network

  claim_db:
    image: postgres:16
    container_name: claim_db
    environment:
      POSTGRES_USER: claim_user  
      POSTGRES_PASSWORD: claim_password  
      POSTGRES_DB: claim_db  
     
    healthcheck:  # Add healthcheck
      test: ["CMD-SHELL", "pg_isready -U claim_user -d claim_db"]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: always
    networks:
      - app_network

  claim_service:
    build: ./services/claim_management
    container_name: claim_service
    env_file:
      - .env
    depends_on:
      claim_db:
        condition: service_healthy  # Add healthcheck dependency
    environment:
      DATABASE_URL: postgresql://claim_user:claim_password@claim_db:5432/claim_db
      POLICY_SERVICE_URL: http://policy_service:8000
      CONFIG_SERVICE_URL: http://config_service:8000
    networks:
      - app_network

  dfs_tests:
    build:
      context: ./services/dfs
    profiles: ["test"]
    env_file:
      - .env
    environment:
      DATABASE_URL: sqlite:///:memory
      USER_SERVICE_URL: http://user_service:8000
      POLICY_SERVICE_URL: http://policy_service:8000
    container_name: enrollment_tests
    command: ["pytest", "-v", "--tb=short", "-p", "no:cacheprovider"]
    networks:
      - app_network

  gateway:
    build:
      context: ./services/gateway
    container_name: gateway
    env_file:
      - .env
    ports:
      - "${GATEWAY_PORT}:${GATEWAY_PORT}"
    environment:
      - GATEWAY_PORT=${GATEWAY_PORT}
      - COMPANY_SERVICE_URL=http://company_service:8000
      - PRODUCT_SERVICE_URL=http://product_service:8000
      - USER_SERVICE_URL=http://user_service:8000
      - POLICY_SERVICE_URL=http://policy_service:8000
      - REPORT_SERVICE_URL=http://report_service:8000
      - DFS_SERVICE_URL=http://dfs_service:8000
      - CLAIM_SERVICE_URL=http://claim_service:8000
      - NOTIFICATION_SERVICE_URL=http://notification_service:8000
    networks:
      - app_network

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4
    restart: always
    env_file:
      - .env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    depends_on:
      product_db:
        condition: service_healthy
    networks:
      - app_network

  notification_service:
    build:
      context: ./services/notification
    container_name: notification_service
    env_file:
      - .env
    environment:
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_FROM=${SMTP_FROM}
    networks:
      - app_network

  frontend:
    build:
      context: ./frontend
      args:
        HOST: ${HOST}
        GATEWAY_PORT: ${GATEWAY_PORT}
        FRONTEND_PORT: ${FRONTEND_PORT}
    container_name: frontend
    env_file:
      - .env
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}" # Expose the port defined in the Dockerfile
    depends_on:
      - gateway # Assuming your frontend needs the gateway to be up
    environment:
      # These are runtime environment variables, if your app needs them
      # If your Next.js app uses NEXT_PUBLIC_ for these, they are already baked in at build time
      # HOST: ${HOST} # Not typically needed at runtime if baked in
      # GATEWAY_PORT: ${GATEWAY_PORT} # Not typically needed at runtime if baked in
      PORT: ${FRONTEND_PORT} # The port the Next.js server will listen on inside the container
    networks:
      - app_network

volumes:
  claim_pgdata:
  pgdata_company:
  pgdata_product:
  pgdata_users:
  pgdata_policy:
  pgdata_report:
  pgdata_dfs:
  pgdata_config: # Added volume for config_db
  pgdata_claim:

networks:
  app_network:
    driver: bridge
