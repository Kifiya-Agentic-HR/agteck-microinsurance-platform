name: Deploy to EC2 with Docker Compose

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # === COPY EVERYTHING TO EC2 ===
      - name: Copy files to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          # tell the action to scp your entire workspace
          scp: true
          source: "./"
          target: "~/agteck"
        
      # === SSH IN AND DEPLOY ===
      - name: Deploy on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            cd ~/agteck

            echo "Creating .env file..."
            cat <<EOF > .env
            # Database Configurations
            DB_USER=${{ secrets.DB_USER }}
            DB_PASS=${{ secrets.DB_PASS }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_NAME=${{ secrets.DB_NAME }}

            # PGAdmin Configurations
            PGADMIN_DEFAULT_EMAIL=${{ secrets.PGADMIN_EMAIL }}
            PGADMIN_DEFAULT_PASSWORD=${{ secrets.PGADMIN_PASS }}

            # Admin Credentials
            ADMIN_USERNAME=${{ secrets.ADMIN_USER }}
            ADMIN_PASSWORD=${{ secrets.ADMIN_PASS }}

            # Company Database Configurations
            COMPANY_DB_USER=${{ secrets.COMPANY_DB_USER }}
            COMPANY_DB_PASS=${{ secrets.COMPANY_DB_PASS }}
            COMPANY_DB_HOST=${{ secrets.COMPANY_DB_HOST }}
            COMPANY_DB_PORT=${{ secrets.COMPANY_DB_PORT }}
            COMPANY_DB_NAME=${{ secrets.COMPANY_DB_NAME }}

            # JWT Configurations
            JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
            JWT_ALGORITHM=${{ secrets.JWT_ALGORITHM }}
            JWT_EXPIRY_MINUTES=${{ secrets.JWT_EXPIRY }}

            # Config Microservice
            CONFIG_DB_URL=${{ secrets.CONFIG_DB_URL }}

            # Policy Microservice
            POLICY_DB_URL=${{ secrets.POLICY_DB_URL }}

            # Report Microservice
            REPORT_DB_URL=${{ secrets.REPORT_DB_URL }}

            # DFS Microservice
            DFS_DB_USER=${{ secrets.DFS_DB_USER }}
            DFS_DB_PASS=${{ secrets.DFS_DB_PASS }}
            DFS_DB_HOST=${{ secrets.DFS_DB_HOST }}
            DFS_DB_PORT=${{ secrets.DFS_DB_PORT }}
            DFS_DB_NAME=${{ secrets.DFS_DB_NAME }}

            # Application Host/Ports
            HOST=${{ secrets.HOST }}
            GATEWAY_PORT=${{ secrets.GATEWAY_PORT }}
            FRONTEND_PORT=${{ secrets.FRONTEND_PORT }}

            # Notification Microservice
            SMTP_HOST=${{ secrets.SMTP_HOST }}
            SMTP_PORT=${{ secrets.SMTP_PORT }}
            SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}
            SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}
            SMTP_FROM=${{ secrets.SMTP_FROM }}
            EOF

            echo ".env file created successfully"

            echo "Building & starting Docker Compose…"
            docker-compose up --build -d
            echo "✅ Deployment completed!"
